<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AI Chat Interface</title>
  <link href="/css/output.css" rel="stylesheet">
</head>

<body class="bg-gray-100 h-screen">
  <div class="container mx-auto p-4 h-full flex flex-col">
    <!-- Header -->
    <header class="bg-white rounded-lg shadow-md p-4 mb-4">
      <h1 class="text-2xl font-bold text-gray-800">AI Chat Assistant</h1>
    </header>

    <!-- Chat Container -->
    <div class="flex-1 bg-white rounded-lg shadow-md p-4 mb-4 overflow-hidden flex flex-col">
      <!-- Messages Area -->
      <div id="chat-messages" class="flex-1 overflow-y-auto space-y-4 mb-4">
        <!-- Messages will be inserted here -->
      </div>

      <!-- Input Area -->
      <form id="chat-form" class="flex gap-2">
        <textarea id="user-input"
          class="flex-1 border rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="Type your message... (Shift+Enter for new line)" rows="1" style="resize: none;"></textarea>
        <button type="submit" class="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors">
          Send
        </button>
      </form>
    </div>
  </div>

  <script>
    const chatForm = document.getElementById('chat-form');
    const userInput = document.getElementById('user-input');
    const chatMessages = document.getElementById('chat-messages');

    // Auto-resize textarea as user types
    userInput.addEventListener('input', function () {
      this.style.height = 'auto';
      this.style.height = (this.scrollHeight) + 'px';
    });

    // Handle Enter and Shift+Enter
    userInput.addEventListener('keydown', function (e) {
      if (e.key === 'Enter') {
        if (!e.shiftKey) {
          e.preventDefault();
          chatForm.requestSubmit();
        }
      }
    });

    function appendMessage(content, isUser = false) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `flex ${isUser ? 'justify-end' : 'justify-start'}`;

      messageDiv.innerHTML = `
        <div class="${isUser ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-800'} 
                             rounded-lg px-4 py-2 max-w-[70%] whitespace-pre-wrap">
          ${content}
        </div>
      `;

      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    chatForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const message = userInput.value.trim();
      if (!message) return;

      // Append user message
      appendMessage(message, true);
      userInput.value = '';

      try {
        const response = await fetch('/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ message }),
        });

        const reader = response.body.getReader();
        let partialResponse = '';

        while (true) {
          const { done, value } = await reader.read();
          if (done) break;

          const chunk = new TextDecoder().decode(value);
          const lines = (partialResponse + chunk).split('\n');
          partialResponse = lines.pop();

          for (const line of lines) {
            if (line.startsWith('data: ')) {
              const data = JSON.parse(line.slice(6));
              appendMessage(data.text);
            }
          }
        }
      } catch (error) {
        console.error('Error:', error);
        appendMessage('Sorry, something went wrong. Please try again.');
      }
    });
  </script>
</body>

</html>