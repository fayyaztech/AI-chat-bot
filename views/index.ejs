<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AI Chat Interface</title>
  <link href="/css/output.css" rel="stylesheet">
  <!-- Add KaTeX -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css">
  <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js"></script>
  <!-- Add Marked -->
  <script src="https://cdn.jsdelivr.net/npm/marked@12.0.0/lib/marked.umd.js"></script>
  <style>
    /* Avatar styles */
    .avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      color: white;
    }

    .user-avatar {
      background-color: #4F46E5;
    }

    .bot-avatar {
      background-color: #059669;
    }

    .message-content {
      overflow-x: auto;
    }

    .message-content pre {
      background: #f4f4f4;
      padding: 1em;
      border-radius: 0.5em;
      margin: 0.5em 0;
    }

    .message-content code {
      background: #f4f4f4;
      padding: 0.2em 0.4em;
      border-radius: 0.3em;
    }

    .message-content p {
      margin: 0.5em 0;
    }

    .katex-display {
      overflow-x: auto;
      overflow-y: hidden;
      padding: 0.5em 0;
    }

    /* Thinking animation */
    .thinking {
      display: flex;
      align-items: center;
      gap: 4px;
      padding: 8px 12px;
    }

    .thinking span {
      display: inline-block;
      width: 8px;
      height: 8px;
      background-color: #9CA3AF;
      border-radius: 50%;
      animation: bounce 1.4s infinite ease-in-out;
    }

    .thinking span:nth-child(1) {
      animation-delay: -0.32s;
    }

    .thinking span:nth-child(2) {
      animation-delay: -0.16s;
    }

    @keyframes bounce {

      0%,
      80%,
      100% {
        transform: scale(0);
      }

      40% {
        transform: scale(1);
      }
    }
  </style>
</head>

<body class="bg-gray-100 h-screen">
  <div class="container mx-auto p-4 h-full flex flex-col">
    <!-- Header -->
    <header class="bg-white rounded-lg shadow-md p-4 mb-4">
      <h1 class="text-2xl font-bold text-gray-800">AI Chat Assistant</h1>
      <button id="clear-chat"
        class="mt-2 px-4 py-2 text-sm text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-colors">
        Clear Chat
      </button>
    </header>

    <!-- Chat Container -->
    <div class="flex-1 bg-white rounded-lg shadow-md p-4 mb-4 overflow-hidden flex flex-col">
      <!-- Messages Area -->
      <div id="chat-messages" class="flex-1 overflow-y-auto space-y-4 mb-4">
        <!-- Messages will be inserted here -->
      </div>

      <!-- Input Area -->
      <form id="chat-form" class="flex gap-2">
        <textarea id="user-input"
          class="flex-1 border rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="Type your message... (Shift+Enter for new line)" rows="1" style="resize: none;"></textarea>
        <button type="submit" id="submit-button"
          class="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors">
          Send
        </button>
      </form>
    </div>
  </div>

  <script>
    const chatForm = document.getElementById('chat-form');
    const userInput = document.getElementById('user-input');
    const chatMessages = document.getElementById('chat-messages');
    const submitButton = document.getElementById('submit-button');
    let controller = null;
    let chatHistory = [];

    // Initialize with system message
    chatHistory.push({
      role: 'system',
      content: 'Instructions: Please provide direct, concise answers without any thinking process or meta-commentary. Format math with LaTeX notation using \\( \\) for inline and \\[ \\] for display math. Use markdown for formatting.'
    });

    function addThinkingAnimation() {
      const thinkingDiv = document.createElement('div');
      thinkingDiv.className = 'flex items-start gap-2';
      thinkingDiv.id = 'thinking-animation';
      thinkingDiv.innerHTML = `
        <div class="avatar bot-avatar">AI</div>
        <div class="bg-gray-100 text-gray-800 rounded-lg thinking">
          <span></span>
          <span></span>
          <span></span>
        </div>
      `;
      chatMessages.appendChild(thinkingDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function removeThinkingAnimation() {
      const thinkingDiv = document.getElementById('thinking-animation');
      if (thinkingDiv) {
        thinkingDiv.remove();
      }
    }

    function setLoading(isLoading) {
      userInput.disabled = isLoading;
      submitButton.disabled = isLoading;
      submitButton.className = isLoading
        ? 'bg-red-500 text-white px-6 py-2 rounded-lg hover:bg-red-600 transition-colors'
        : 'bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors';
      submitButton.textContent = isLoading ? 'Stop' : 'Send';
      if (isLoading) {
        addThinkingAnimation();
      } else {
        removeThinkingAnimation();
      }
    }

    function stopGeneration() {
      if (controller) {
        controller.abort();
        controller = null;
        setLoading(false);
      }
    }

    // Auto-resize textarea as user types
    userInput.addEventListener('input', function () {
      this.style.height = 'auto';
      this.style.height = (this.scrollHeight) + 'px';
    });

    // Handle Enter and Shift+Enter
    userInput.addEventListener('keydown', function (e) {
      if (e.key === 'Enter') {
        if (!e.shiftKey) {
          e.preventDefault();
          chatForm.requestSubmit();
        }
      }
    });

    // Configure marked
    marked.use({
      mangle: false,
      headerIds: false,
      breaks: true
    });

    function formatMessage(content) {
      // Remove <think> tags if present
      content = content.replace(/<think>[\s\S]*?<\/think>/g, '');

      // Convert LaTeX-style math to KaTeX HTML
      content = content.replace(/\\\((.*?)\\\)/g, (match, p1) => {
        try {
          return katex.renderToString(p1, { displayMode: false });
        } catch (e) {
          return match;
        }
      });

      content = content.replace(/\\\[(.*?)\\\]/g, (match, p1) => {
        try {
          return katex.renderToString(p1, { displayMode: true });
        } catch (e) {
          return match;
        }
      });

      // Convert markdown to HTML
      return marked.parse(content);
    }

    function appendMessage(content, isUser = false) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `flex items-start gap-2 ${isUser ? 'flex-row-reverse' : ''}`;
      const formattedContent = isUser ? content : formatMessage(content);

      messageDiv.innerHTML = `
        <div class="avatar ${isUser ? 'user-avatar' : 'bot-avatar'}">
          ${isUser ? 'You' : 'AI'}
        </div>
        <div class="${isUser ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-800'} 
                             rounded-lg px-4 py-2 max-w-[70%] message-content">
          ${formattedContent}
        </div>
      `;

      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;

      // Add message to history
      chatHistory.push({
        role: isUser ? 'user' : 'assistant',
        content: content
      });
    }

    chatForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const message = userInput.value.trim();
      if (!message) return;

      // If already loading, treat as stop button
      if (controller) {
        stopGeneration();
        return;
      }

      // Append user message
      appendMessage(message, true);
      userInput.value = '';
      userInput.style.height = 'auto';

      // Create new abort controller
      controller = new AbortController();
      setLoading(true);

      try {
        const response = await fetch('/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ message, history: chatHistory }),
          signal: controller.signal
        });

        let fullResponse = '';
        const reader = response.body.getReader();

        while (true) {
          const { done, value } = await reader.read();
          if (done) break;

          const chunk = new TextDecoder().decode(value);
          const lines = chunk.split('\n');

          for (const line of lines) {
            if (line.startsWith('data: ')) {
              const data = JSON.parse(line.slice(6));
              fullResponse = data.text;
            }
          }
        }
        // Show complete response at once
        appendMessage(fullResponse);
      } catch (error) {
        if (error.name === 'AbortError') {
          appendMessage('Response generation stopped.');
        } else {
          console.error('Error:', error);
          appendMessage('Sorry, something went wrong. Please try again.');
        }
      } finally {
        controller = null;
        setLoading(false);
      }
    });

    // Add clear chat button to header
    document.querySelector('header').innerHTML += `
      <button id="clear-chat" 
        class="mt-2 px-4 py-2 text-sm text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-colors">
        Clear Chat
      </button>
    `;

    document.getElementById('clear-chat').addEventListener('click', () => {
      chatMessages.innerHTML = '';
      chatHistory = [{
        role: 'system',
        content: 'Instructions: Please provide direct, concise answers without any thinking process or meta-commentary. Format math with LaTeX notation using \\( \\) for inline and \\[ \\] for display math. Use markdown for formatting.'
      }];
    });
  </script>
</body>

</html>